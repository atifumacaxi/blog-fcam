{"version":3,"sources":["styles/global.js","components/Header/styles.js","components/Header/index.js","config/firebase.js","pages/Main/styles.js","consts/b2c_array.js","pages/Main/index.js","pages/Auth/login.js","pages/Admin/index.js","routes/index.js","App.js","serviceWorker.js","index.js"],"names":["GlobalStyle","createGlobalStyle","_templateObject","Container","styled","div","styles_templateObject","Menu","_templateObject2","NavMenu","ul","_templateObject3","Header","react_default","a","createElement","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","database","Main_styles_templateObject","LeadForm","section","styles_templateObject2","form","styles_templateObject3","b2cDomain","Main","state","email","nome","ip","tipo","data_hora","handleInputChange","e","_this","setState","Object","defineProperty","target","name","value","handleSubmit","_callee","_this$state","address","id","leads","regenerator_default","wrap","_context","prev","next","preventDefault","split","pop","findMyIp","sent","some","d","concat","Date","toISOString","slice","toLocaleTimeString","ref","push","key","update","stop","fetch","json","dataIp","origin","_this$state2","this","react","styles_Container","onSubmit","type","htmlFor","onChange","placeholder","Component","Auth","Admin","Routes","react_router_dom","react_router","exact","path","component","Login","App","components_Header","routes","global","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8uBAEA,IAgCeA,EAhCKC,YAAHC,6iBCAV,IAAMC,EAAYC,IAAOC,IAAVC,KAmBTC,EAAOH,IAAOC,IAAVG,KAEJC,EAAUL,IAAOM,GAAVC,KCNLC,EAbA,kBACbC,EAAAC,EAAAC,cAACZ,EAAD,KACEU,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAACR,EAAD,aACAM,EAAAC,EAAAC,cAACN,EAAD,KACEI,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,wICGVC,IAASC,cAVc,CACrBC,OAAQ,0CACRC,WAAY,4BACZC,YAAa,mCACbC,UAAW,YACXC,cAAe,wBACfC,kBAAmB,eACnBC,MAAO,wCAKF,IAAMC,EAAWT,IAASS,6YCb1B,IAAMtB,EAAYC,IAAOC,IAAVqB,KAaTC,GAPUvB,IAAOwB,QAAVC,KAOIzB,IAAO0B,KAAVC,MCfRC,EAAa,CACxB,YACC,YACA,cACA,UACA,gBACA,aACA,UACA,WACA,aACA,YACA,cACA,cACA,eACA,cACA,WACA,iBACA,UACA,SACA,SACA,YACA,YACA,YACA,cACA,aACA,aACA,UACA,UACA,aACA,gBACA,SACA,UACA,cACA,aACA,iBACA,WACA,YACA,UACA,cACA,eACA,WACA,UACA,WACA,WACA,iBACA,UACA,cACA,eACA,gBACA,WACA,aACA,cACA,WACA,eACA,aACA,aACA,aACA,UACA,cACA,UACA,gBACA,gBACA,aACA,cACA,eACA,cACA,UACA,SACA,aACA,SACA,eACA,gBACA,eACA,WACA,UACA,WACA,YACA,SACA,UACA,eACA,WACA,cACA,kBACA,YACA,cACA,eACA,YACA,mBACA,WACA,kBACA,mBACA,aACA,YACA,eACA,iBACA,UACA,iBACA,YACA,UACA,UACA,kBCjBYC,6MA5EbC,MAAQ,CACNC,MAAO,GACPC,KAAM,GACNC,GAAI,GACJC,KAAM,GACNC,UAAW,MAEbC,kBAAoB,SAAAC,GAClBC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GAAiBH,EAAEK,OAAOC,KAAON,EAAEK,OAAOE,WAY5CC,mDAAe,SAAAC,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","file":"static/js/main.2362b5e7.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n\r\n  @import url('https://fonts.googleapis.com/css?family=Lato');\r\n\r\n  * {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    outline: 0;\r\n  }\r\n\r\n  body {\r\n    background: #ECF0F1;\r\n    text-rendering: optimizeLegibility !important;\r\n    -webkit-font-smoothing: antialiased !important;\r\n    font-family: 'Lato', sans-serif;\r\n  }\r\n\r\n  html, body, #root{\r\n    height:100%;\r\n\r\n  }\r\n\r\n  input, button{\r\n    font-family: 'Lato', sans-serif;\r\n  }\r\n\r\n  button{\r\n    cursor:pointer;\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  width: 100%;\r\n  height: 80px;\r\n  margin-bottom: 100px;\r\n  display: flex;\r\n  justify-content: center;\r\n\r\n  header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    width: 100%;\r\n    padding: 0 25px;\r\n    /* max-width: 1440px; */\r\n    background: #3498db;\r\n    color: #fff;\r\n  }\r\n`;\r\n\r\nexport const Menu = styled.div``;\r\n\r\nexport const NavMenu = styled.ul`\r\n  list-style: none;\r\n`;\r\n","import React from \"react\";\r\n\r\nimport { Container, Menu, NavMenu } from \"./styles\";\r\n\r\nconst Header = () => (\r\n  <Container>\r\n    <header>\r\n      <Menu>Blog</Menu>\r\n      <NavMenu>\r\n        <li>\r\n          <span>Link</span>\r\n        </li>\r\n      </NavMenu>\r\n    </header>\r\n  </Container>\r\n);\r\n\r\nexport default Header;\r\n","import firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAtzki8x2aw7QJXbqrbvR5hMhUhuNkz2z0\",\r\n  authDomain: \"blog-fcam.firebaseapp.com\",\r\n  databaseURL: \"https://blog-fcam.firebaseio.com\",\r\n  projectId: \"blog-fcam\",\r\n  storageBucket: \"blog-fcam.appspot.com\",\r\n  messagingSenderId: \"301059358640\",\r\n  appId: \"1:301059358640:web:5a72db5bd7eb6ab2\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const database = firebase.database();\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n`;\r\n\r\nexport const Content = styled.section`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  color: #ffe;\r\n`;\r\n\r\nexport const LeadForm = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n","export const b2cDomain =  [\r\n  \"gmail.com\"\r\n  ,\"yahoo.com\"\r\n  ,\"hotmail.com\"\r\n  ,\"aol.com\"\r\n  ,\"hotmail.co.uk\"\r\n  ,\"hotmail.fr\"\r\n  ,\"msn.com\"\r\n  ,\"yahoo.fr\"\r\n  ,\"wanadoo.fr\"\r\n  ,\"orange.fr\"\r\n  ,\"comcast.net\"\r\n  ,\"yahoo.co.uk\"\r\n  ,\"yahoo.com.br\"\r\n  ,\"yahoo.co.in\"\r\n  ,\"live.com\"\r\n  ,\"rediffmail.com\"\r\n  ,\"free.fr\"\r\n  ,\"gmx.de\"\r\n  ,\"web.de\"\r\n  ,\"yandex.ru\"\r\n  ,\"ymail.com\"\r\n  ,\"libero.it\"\r\n  ,\"outlook.com\"\r\n  ,\"uol.com.br\"\r\n  ,\"bol.com.br\"\r\n  ,\"mail.ru\"\r\n  ,\"cox.net\"\r\n  ,\"hotmail.it\"\r\n  ,\"sbcglobal.net\"\r\n  ,\"sfr.fr\"\r\n  ,\"live.fr\"\r\n  ,\"verizon.net\"\r\n  ,\"live.co.uk\"\r\n  ,\"googlemail.com\"\r\n  ,\"yahoo.es\"\r\n  ,\"ig.com.br\"\r\n  ,\"live.nl\"\r\n  ,\"bigpond.com\"\r\n  ,\"terra.com.br\"\r\n  ,\"yahoo.it\"\r\n  ,\"neuf.fr\"\r\n  ,\"yahoo.de\"\r\n  ,\"alice.it\"\r\n  ,\"rocketmail.com\"\r\n  ,\"att.net\"\r\n  ,\"laposte.net\"\r\n  ,\"facebook.com\"\r\n  ,\"bellsouth.net\"\r\n  ,\"yahoo.in\"\r\n  ,\"hotmail.es\"\r\n  ,\"charter.net\"\r\n  ,\"yahoo.ca\"\r\n  ,\"yahoo.com.au\"\r\n  ,\"rambler.ru\"\r\n  ,\"hotmail.de\"\r\n  ,\"tiscali.it\"\r\n  ,\"shaw.ca\"\r\n  ,\"yahoo.co.jp\"\r\n  ,\"sky.com\"\r\n  ,\"earthlink.net\"\r\n  ,\"optonline.net\"\r\n  ,\"freenet.de\"\r\n  ,\"t-online.de\"\r\n  ,\"aliceadsl.fr\"\r\n  ,\"virgilio.it\"\r\n  ,\"home.nl\"\r\n  ,\"qq.com\"\r\n  ,\"telenet.be\"\r\n  ,\"me.com\"\r\n  ,\"yahoo.com.ar\"\r\n  ,\"tiscali.co.uk\"\r\n  ,\"yahoo.com.mx\"\r\n  ,\"voila.fr\"\r\n  ,\"gmx.net\"\r\n  ,\"mail.com\"\r\n  ,\"planet.nl\"\r\n  ,\"tin.it\"\r\n  ,\"live.it\"\r\n  ,\"ntlworld.com\"\r\n  ,\"arcor.de\"\r\n  ,\"yahoo.co.id\"\r\n  ,\"frontiernet.net\"\r\n  ,\"hetnet.nl\"\r\n  ,\"live.com.au\"\r\n  ,\"yahoo.com.sg\"\r\n  ,\"zonnet.nl\"\r\n  ,\"club-internet.fr\"\r\n  ,\"juno.com\"\r\n  ,\"optusnet.com.au\"\r\n  ,\"blueyonder.co.uk\"\r\n  ,\"bluewin.ch\"\r\n  ,\"skynet.be\"\r\n  ,\"sympatico.ca\"\r\n  ,\"windstream.net\"\r\n  ,\"mac.com\"\r\n  ,\"centurytel.net\"\r\n  ,\"chello.nl\"\r\n  ,\"live.ca\"\r\n  ,\"aim.com\"\r\n  ,\"bigpond.net.au\"\r\n  ]","import React, { Component, Fragment } from \"react\";\r\nimport { database } from \"../../config/firebase\";\r\nimport { Container, LeadForm } from \"./styles\";\r\n\r\nimport { b2cDomain } from \"../../consts/b2c_array\";\r\n\r\nclass Main extends Component {\r\n  state = {\r\n    email: \"\",\r\n    nome: \"\",\r\n    ip: \"\",\r\n    tipo: \"\",\r\n    data_hora: \"\"\r\n  };\r\n  handleInputChange = e => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  //componentDidMount = () => {};\r\n  //const teste =  b2cDomain.some(d => d === address) ? \"b2c\": \"b2b\";\r\n\r\n  async findMyIp() {\r\n    const ip = await fetch(\"http://httpbin.org/ip\");\r\n    const dataIp = await ip.json();\r\n    return dataIp.origin.split(\",\")[0];\r\n  }\r\n\r\n  handleSubmit = async e => {\r\n    e.preventDefault();\r\n    let { email, nome, ip, tipo, data_hora } = this.state; //, tipo, data_hora\r\n    const address = email.split(\"@\").pop();\r\n\r\n    ip = await this.findMyIp();\r\n    tipo = b2cDomain.some(d => d === address) ? \"b2c\" : \"b2b\";\r\n    data_hora = `${new Date()\r\n      .toISOString()\r\n      .slice(0, 10)} ${new Date().toLocaleTimeString()}`;\r\n\r\n    const id = database.ref().push().key;\r\n    const leads = {};\r\n\r\n    leads[\"leads/\" + id] = {\r\n      email: email,\r\n      nome: nome,\r\n      ip: ip,\r\n      tipo: tipo,\r\n      data_hora: data_hora\r\n    };\r\n\r\n    database.ref().update(leads);\r\n  };\r\n\r\n  render() {\r\n    const { email, nome } = this.state; //, ip, tipo, data_hora\r\n    return (\r\n      <Fragment>\r\n        <Container>\r\n          <LeadForm onSubmit={this.handleSubmit} type=\"post\">\r\n            <label htmlFor=\"nome\">Nome</label>\r\n            <input\r\n              name=\"nome\"\r\n              id=\"nome\"\r\n              type=\"text\"\r\n              value={nome}\r\n              onChange={this.handleInputChange}\r\n            />\r\n            <label htmlFor=\"email\">E-mail</label>\r\n            <input\r\n              name=\"email\"\r\n              id=\"email\"\r\n              type=\"text\"\r\n              value={email}\r\n              placeholder=\"E-mail\"\r\n              onChange={this.handleInputChange}\r\n            />\r\n            <button type=\"submit\">Cadastrar</button>\r\n          </LeadForm>\r\n        </Container>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\n\r\n// import { Container } from './styles';\r\n\r\nconst Auth = () => <div>Login</div>;\r\n\r\nexport default Auth;\r\n","import React from \"react\";\r\n\r\n// import { Container } from './styles';\r\n\r\nconst Admin = () => <div>admin</div>;\r\n\r\nexport default Admin;\r\n","import React, { Fragment } from \"react\";\r\n\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\n\r\nimport Main from \"../pages/Main\";\r\nimport Login from \"../pages/Auth/login\";\r\nimport Admin from \"../pages/Admin\";\r\n\r\nconst Routes = () => (\r\n  <BrowserRouter>\r\n    <Fragment>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Main} />\r\n        <Route path=\"/login\" component={Login} />\r\n        <Route path=\"/admin\" component={Admin} />\r\n      </Switch>\r\n    </Fragment>\r\n  </BrowserRouter>\r\n);\r\n\r\nexport default Routes;\r\n","import React, { Fragment } from \"react\";\nimport GlobalStyled from \"./styles/global\";\n\nimport Header from \"./components/Header\";\n\nimport Routes from \"./routes\";\n\nconst App = () => (\n  <Fragment>\n    <Header />\n    <Routes />\n    <GlobalStyled />\n  </Fragment>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}